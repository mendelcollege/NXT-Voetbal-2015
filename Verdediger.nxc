task balzoeken();
task schieten();
task mikken();
/*
* standaardprogramma voor de bediening van de infrarood sensor
*
* 'Dir' staat voor richting, er zijn 5 richtingen mogelijk.
* 's' staat voor de signaalsterkte, deze is (meestal) recht evenredig met de afstand
*/
//een effectievere maar praktisch overbodige mannier om text en getallen achter elkaar te zetten
#define TextNumOut(xPos,yPos,str,col,num)  TextOut(xPos,yPos,str);NumOut(xPos+6*col,yPos,num)
void HTEnhancedIRSeekerV2(const byte  port, int &dir, int &strength)
{
  int cResp;
  byte cmdBuf[] = {0x10, 0x43};  // Read DC signal strengths
  byte respBuf[];                 // Response Buffer
  bool fSuccess;
  int i, iMax;
  long dcSigSum, dcStr;
  dir = 0;
  strength = 0;
  // Read DC mode
  cResp=6;
  fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
  if (fSuccess) {
    // Find the max DC sig strength
    iMax = 0;
    for (i=1; i<5; i++) if (respBuf[i] > respBuf[iMax]) iMax = i;
    // Calc base DC direction value
    dir = iMax*2+1;
    // Set base dcStrength based on max signal and average
    dcSigSum = respBuf[iMax] + respBuf[5];
    // Check signal strength of neighboring sensor elements
    if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2)) {
        dir--;
        dcSigSum += respBuf[iMax-1];
    }
    if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2)) {
        dir++;
        dcSigSum += respBuf[iMax+1];
    }
    // Make DC strength compatible with AC strength.
// use: sqrt(dcSigSum*500)
    dcSigSum *= 500; dcStr = 1;
    repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;  // sqrt
    strength = dcStr;
    // Decide if using DC strength
    if (strength <= 200) {
      // Use AC Dir
      dir = 0; strength = 0;
      cmdBuf[1] = 0x49; // Recycle rest of cmdBuf
      cResp=6;
      fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
      if (fSuccess) {
        dir = respBuf[0];
        // Sum the sensor elements to get strength
        if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
      }
    }
  }
}

task main()
{
  int richting, afstand;                       //maak variabelen voor het opslaan van de gemeten waarden
  SetSensorLowspeed(IN_3);          //start de infraroodsensor, aangesloten op poort 3
  SetSensorLowspeed(IN_2);
  SetSensorTouch(IN_1);
  while(true)                                                 //start oneindige loop
  {
    HTEnhancedIRSeekerV2(IN_3, richting, afstand);            //meet waarden van poort 3 en sla ze op
    TextNumOut(0, LCD_LINE3, "Dir:    ",4, richting);         //print richting
    TextNumOut(6, LCD_LINE4, "St:     ",3, afstand);          //print afstand
    Wait(100);
    ExitTo(balzoeken);
  }
}

task balzoeken()
{
 int richting, afstand;
 SetSensorLowspeed(IN_3);
 SensorHTCompass(IN_2);
 SetSensorTouch(S1);
 while (true)
 {
  HTEnhancedIRSeekerV2(IN_3, richting, afstand);            //meet waarden van poort 3 en sla ze op
  TextNumOut(0, LCD_LINE3, "Dir:    ",4, richting);         //print richting
  TextNumOut(6, LCD_LINE4, "St:     ",3, afstand);          //print afstand
  NumOut(0, LCD_LINE5, SensorHTCompass(IN_2));
  TextOut(0, LCD_LINE6 , "zoeken");
  Wait(100);
  OnRev (OUT_AC,50);
  if (richting == 5)
  {
   OnRev (OUT_AC,50);
  }
  if (richting == 4)
  {
   OnRev (OUT_A,35);
   OnFwd(OUT_C,35);
  }
  if (richting < 4)
  {
   OnRev (OUT_A,50);
   OnFwd (OUT_C,50);
  }
  if (richting == 6)
  {
   OnRev (OUT_C,35);
   OnFwd (OUT_A,35);
  }
  if (richting > 6)
  {
   OnRev (OUT_C,50);
   OnFwd (OUT_A,50);
  }
  if (richting == 5 && afstand > 285)
  {
   ExitTo (mikken);
  }
 }
}

task mikken()
{
 int richting;
 int afstand;
 while(true)
 {
  SensorHTCompass(IN_2);
  SetSensorLowspeed(S1);
  SetSensorLowspeed(S3);
  {
   TextNumOut(0, LCD_LINE3, "Dir:    ",4, richting);         //print richting
   TextNumOut(6, LCD_LINE4, "St:     ",3, afstand);          //print afstand
   NumOut(0, LCD_LINE5, SensorHTCompass(IN_2));
   TextOut(0, LCD_LINE6 , "mikken");
   if (SensorHTCompass (S2) > 10 && SensorHTCompass (S2) < 180)
   {
    OnFwd (OUT_C,50);
    OnRev (OUT_A,50);
   if (SensorHTCompass (S2) > 180 && SensorHTCompass (S2) < 350)
   {
   }
    OnFwd (OUT_A,50);
    OnRev (OUT_C,50);
   }
   else
   {
    ExitTo(schieten);
   }
  }
 }
}

task schieten()
{
 Off (OUT_AC);
 Wait(100);
 OnFwd (OUT_B,100);
 Wait (250);
 OnRev (OUT_B,100);
 Wait (250);
 ExitTo (balzoeken);
}

